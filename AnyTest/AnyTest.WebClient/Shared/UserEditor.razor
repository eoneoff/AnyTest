@inherits ValidatableFormViewModel<RegisterModel>

    <ValidatableForm @ref="form" Model="Model" OnSubmit="OnSubmit" OnCancel="OnCancel" Unchanged="@unchanged" HideButtons="@HideButtons">
        <ValidatableFormField Wide="@Wide" Label="@($"{Localizer[nameof(Resources.UserName)]}")" Id="login">
            <ValidationMessage For="@(()=>Model.UserName)" />
            <InputText Id="login" Class="form-control" @bind-Value="Model.UserName" @oninput="@(()=>unchanged = false)" />
        </ValidatableFormField>
        <ValidatableFormField Wide="@Wide" Label="e-mail" Id="login">
            <ValidationMessage For="@(()=>Model.Email)" />
            <InputText Id="userEmail" Class="form-control" @bind-Value="Model.Email" @oninput="@(()=>unchanged = false)" />
        </ValidatableFormField>
        <ValidatableFormField Wide="@Wide" Label="@($"{Localizer[nameof(Resources.Password)]}")" Id="password">
            <ValidationMessage For="@(()=>Model.Password)" />
            <InputText Id="password" type="password" Class="form-control" @bind-Value="Model.Password" @oninput="@(()=>unchanged = false)" />
        </ValidatableFormField>
        <ValidatableFormField Wide="@Wide" Label="@($"{Localizer[nameof(Resources.ConfirmPassword)]}")" Id="confirmPassword">
            <ValidationMessage For="@(()=>Model.ConfirmPassword)" />
            <InputText Id="confirmPassword" type="password" Class="form-control" @bind-Value="Model.ConfirmPassword" @oninput="@(()=>unchanged = false)" />
        </ValidatableFormField>

        @if (ShowRoles)
        {
            <h6>@Localizer[nameof(Resources.Roles)]</h6>
            <div class="d-flex flex-column flex-lg-row">
                <div class="@(noRolesError ? "invalid" : "") p-1">
                    <div class="custom-control custom-checkbox">
                        <input type="checkbox" @bind="@isAdmin" class="custom-control-input" id="adminRoleCheckbox">
                        <label class="custom-control-label" for="adminRoleCheckbox">@Localizer[nameof(Resources.Administrator)]</label>
                    </div>
                    <div class="custom-control custom-checkbox">
                        <input type="checkbox" @bind="@isTutor" class="custom-control-input" id="tutorRoleCheckbox">
                        <label class="custom-control-label" for="tutorRoleCheckbox">@Localizer[nameof(Resources.Tutor)]</label>
                    </div>
                    <div class="custom-control custom-checkbox">
                        <input type="checkbox" @bind="@isStudent" class="custom-control-input" id="studentRoleCheckbox">
                        <label class="custom-control-label" for="studentRoleCheckbox">@Localizer[nameof(Resources.Student)]</label>
                    </div>
                </div>
                <div class="mt-2 mt-lg-1 mt-lg-0 ml-0 ml-lg-2">
                    @if (noRolesError)
                    {<span class="text-danger">@Localizer[nameof(Resources.ChooseARole)]</span>}
                </div>
            </div>
        }
    </ValidatableForm>

@code
{
    private bool noRolesError = false;

    private bool isAdmin
    {
        get => Model.Roles.Contains("Administrator");
        set
        {
            if(value)
            {
                if(!Model.Roles.Contains("Administrator"))
                {
                    Model.Roles.Add("Administrator");
                    noRolesError = false;
                }
            }
            else Model.Roles.Remove("Administrator");
        }
    }

    private bool isTutor
    {
        get => Model.Roles.Contains("Tutor");
        set
        {
            if(value)
            {
                if(!Model.Roles.Contains("Tutor"))
                {
                    Model.Roles.Add("Tutor");
                    noRolesError = false;
                }
            }
            else Model.Roles.Remove("Tutor");
        }
    }

    private bool isStudent
    {
        get => Model.Roles.Contains("Student");
        set
        {
            if(value)
            {
                if(!Model.Roles.Contains("Student"))
                {
                    Model.Roles.Add("Student");
                    noRolesError = false;
                }
            }
            else Model.Roles.Remove("Student");
        }
    }

    [Parameter]
    public RegisterModel Model { get; set; } = new RegisterModel();

    [Parameter]
    public bool ShowRoles { get; set; } = true;
}