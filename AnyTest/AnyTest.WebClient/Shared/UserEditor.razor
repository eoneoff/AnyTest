<EditForm EditContext="@editContext" OnValidSubmit="OnSubmit">
    <DataAnnotationsValidator />
    <div class="form-group @(Wide?"row":"")">
        <div class="@(Wide?"col-lg-4":"") d-flex flex-column justify-content-lg-end align-content-start align-content-lg-end">
            <label for="login" class="col-form-label text-left @(Wide?"text-lg-right":"") font-weight-bold text-nowrap">@Localizer[nameof(Resources.UserName)]</label>
        </div>
        <div class="@(Wide?"col-lg-8":"") d-flex flex-column px-0">
            <ValidationMessage For="@(()=>Model.UserName)" />
            <InputText Id="login" Class="form-control" @bind-Value="Model.UserName" @oninput="@(()=>unchanged = false)" />
        </div>
    </div>
    <div class="form-group @(Wide?"row":"")">
        <div class="@(Wide?"col-lg-4":"") d-flex flex-column justify-content-lg-end align-content-start align-content-lg-end">
            <label for="userEmail" class="col-form-label text-left @(Wide?"text-lg-right":"") font-weight-bold text-nowrap">e-mail</label>
        </div>
        <div class="@(Wide?"col-lg-8":"") d-flex flex-column px-0">
            <ValidationMessage For="@(()=>Model.Email)" />
            <InputText Id="userEmail" Class="form-control" @bind-Value="Model.Email" @oninput="@(()=>unchanged = false)" />
        </div>
    </div>
    <div class="form-group @(Wide?"row":"")">
        <div class="@(Wide?"col-lg-4":"") d-flex flex-column justify-content-lg-end align-content-start align-content-lg-end">
            <label for="password" class="col-form-label text-left @(Wide?"text-lg-right":"") font-weight-bold text-nowrap">@Localizer[nameof(Resources.Password)]</label>
        </div>
        <div class="@(Wide?"col-lg-8":"") d-flex flex-column px-0">
            <ValidationMessage For="@(()=>Model.Password)" />
            <InputText Id="password" type="password" Class="form-control" @bind-Value="Model.Password" @oninput="@(()=>unchanged = false)" />
        </div>
    </div>
    <div class="form-group @(Wide?"row":"")">
        <div class="@(Wide?"col-lg-4":"") d-flex flex-column justify-content-lg-end align-content-start align-content-lg-end">
            <label for="confirmPassword" class="col-form-label text-left @(Wide?"text-lg-right":"") font-weight-bold text-nowrap">@Localizer[nameof(Resources.ConfirmPassword)]</label>
        </div>
        <div class="@(Wide?"col-lg-8":"") d-flex flex-column px-0">
            <ValidationMessage For="@(()=>Model.ConfirmPassword)" />
            <InputText Id="confirmPassword" type="password" Class="form-control" @bind-Value="Model.ConfirmPassword" @oninput="@(()=>unchanged = false)" />
        </div>
    </div>
    <h6>@Localizer[nameof(Resources.Roles)]</h6>
    <div class="d-flex flex-column flex-lg-row">
        <div class="@(noRolesError ? "invalid" : "") p-1">
            <div class="custom-control custom-checkbox">
                <input type="checkbox" @bind="@isAdmin" class="custom-control-input" id="adminRoleCheckbox">
                <label class="custom-control-label" for="adminRoleCheckbox">@Localizer[nameof(Resources.Administrator)]</label>
            </div>
            <div class="custom-control custom-checkbox">
                <input type="checkbox" @bind="@isTutor" class="custom-control-input" id="tutorRoleCheckbox">
                <label class="custom-control-label" for="tutorRoleCheckbox">@Localizer[nameof(Resources.Tutor)]</label>
            </div>
            <div class="custom-control custom-checkbox">
                <input type="checkbox" @bind="@isStudent" class="custom-control-input" id="studentRoleCheckbox">
                <label class="custom-control-label" for="studentRoleCheckbox">@Localizer[nameof(Resources.Student)]</label>
            </div>
        </div>
        <div class="mt-2 mt-lg-1 mt-lg-0 ml-0 ml-lg-2">
            @if (noRolesError) { <span class="text-danger">@Localizer[nameof(Resources.ChooseARole)]</span> }
        </div>
    </div>
    @if (!HideButtons)
    {
        <div class="d-flex flex-@(Wide?"row":"") justify-content-between mt-3">
            <button type="submit" class="btn btn-success" disabled="@unchanged">@(string.IsNullOrWhiteSpace(Model.UserName) ? Localizer[nameof(Resources.Create)] : Localizer[nameof(Resources.Save)])</button>
            <button type="button" class="btn btn-danger" @onclick="OnCancel">@Localizer[nameof(Resources.Cancel)]</button>
        </div>
    }
</EditForm>

@code
{
    private bool unchanged = true;
    private EditContext editContext { get; set; }
    private bool noRolesError = false;

    private bool isAdmin
    {
        get => Model.Roles.Contains("Administrator");
        set
        {
            if(value)
            {
                if(!Model.Roles.Contains("Administrator"))
                {
                    Model.Roles.Add("Administrator");
                    noRolesError = false;
                }
            }
            else Model.Roles.Remove("Administrator");
        }
    }

    private bool isTutor
    {
        get => Model.Roles.Contains("Tutor");
        set
        {
            if(value)
            {
                if(!Model.Roles.Contains("Tutor"))
                {
                    Model.Roles.Add("Tutor");
                    noRolesError = false;
                }
            }
            else Model.Roles.Remove("Tutor");
        }
    }

    private bool isStudent
    {
        get => Model.Roles.Contains("Student");
        set
        {
            if(value)
            {
                if(!Model.Roles.Contains("Student"))
                {
                    Model.Roles.Add("Student");
                    noRolesError = false;
                }
            }
            else Model.Roles.Remove("Student");
        }
    }

    [Parameter]
    public RegisterModel Model { get; set; } = new RegisterModel();

    [Parameter]
    public bool HideButtons { get; set; } = false;

    [Parameter]
    public EventCallback OnSubmit { get; set; }

    [Parameter]
    public EventCallback OnCancel { get; set; }

    [Parameter]
    public bool Wide { get; set; } = false;

    protected override void OnInitialized()
    {
        editContext = new EditContext(Model);
    }

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        EditContext prev = editContext;
        await base.SetParametersAsync(parameters);
        if(editContext != prev)
        {
            editContext = new EditContext(Model);
        }
    }

    public bool Validate()
    {
        if (Model.Roles.Count == 0) noRolesError = true;
        return editContext.Validate() && !noRolesError;
    }
}