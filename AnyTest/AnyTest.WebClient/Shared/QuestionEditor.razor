@inherits ValidatableFormViewModel<TestQuestion>

<ValidatableForm @ref="form" Model="Question" OnSubmit="OnSubmit" OnCancel="OnCancel" Unchanged="@unchanged" HideButtons="true">
    <ValidatableFormField Wide="@Wide" Label="@Localizer[nameof(Resources.Question)]" Id="question">
        <ValidationMessage For="@(()=>Question.Question)" />
        <InputTextArea Id="question" Class="form-control" @bind-Value="Question.Question" @oninput="@(()=>unchanged = false)" />
    </ValidatableFormField>
</ValidatableForm>
<div class="d-flex flex-row">
    <label class="mr-1">@Localizer[nameof(Resources.OneCorrectOption)]</label>
    <div class="custom-control custom-switch">
        <input type="checkbox" class="custom-control-input" id="multiple-answer" @bind-value="multiple" />
        <label class="custom-control-label" for="multiple-answer">@Localizer[nameof(Resources.MultilpeCorrectOptions)]</label>
    </div>
</div>
<h6>@Localizer[nameof(Resources.Answers)]</h6>
<div class="d-flex flex-row">
    <div class="flex-grow-1 align-self-stretch border boder-success p-1">
        <CascadingValue Value="Question.TestAnswers" Name="Answers">
            <table class="table table-sm table-borderless table-hover">
                @foreach (var answ in Question.TestAnswers.OrderBy(a => a.OrderNo))
                {
                    <tr @onclick="()=>selectedAnswer = answ.OrderNo" class="@(answ.OrderNo  == selectedAnswer ? "selected-table-row" : "")">
                        <th>@(answ.OrderNo).</th><td><AnswerEditor Multiple="@multiple" Answer="@answ" SetAsCorrect="SetCorrectAnswer"/></td>
                    </tr>
                }
            </table> 
        </CascadingValue>    
    </div>
    <div class="d-flex flex-column pl-1">
        <button type="button" class="btn btn-success" @onclick="AddAnswer"><i class="fa fa-plus"></i></button>
        @if (Question.Id > 0) { <button type="button" class="btn btn-success mt-1"><i class="fa fa-pen"></i></button> }
        <button type="button" class="btn btn-danger mt-1" @onclick="Delete"><i class="fa fa-trash"></i></button>
        <button type="button" class="btn btn-success mt-1" @onclick="MoveUp"><i class="fa fa-arrow-up"></i></button>
        <button type="button" class="btn btn-success mt-1" @onclick="MoveDown"><i class="fa fa-arrow-down"></i></button>
    </div>
</div>


@code
{
    private bool multiple;
    private int sum = 0;
    private int selectedAnswer = 0;

    [Parameter]
    public TestQuestion Question { get; set; } = new TestQuestion { TestAnswers = new List<TestAnswer>() };

    private void AddAnswer()
    {
        Question.TestAnswers ??= new List<TestAnswer>();
        Question.TestAnswers.Add(new TestAnswer { OrderNo = Question.TestAnswers.Count + 1 });
    }

    private void SetCorrectAnswer(int correct)
    {
        foreach(var answ in Question.TestAnswers)
        {
            if(answ.OrderNo != correct) answ.Percent = 0;
        }
    }

    private void MoveUp()
    {
        if(selectedAnswer > 1)
        {
            var answer = Question.TestAnswers.First(a => a.OrderNo == selectedAnswer);
            var prevAnswer = Question.TestAnswers.First(a => a.OrderNo == selectedAnswer - 1);
            (answer.OrderNo, prevAnswer.OrderNo) = (prevAnswer.OrderNo, answer.OrderNo);
            selectedAnswer--;
        }
    }

    private void MoveDown()
    {
        if(selectedAnswer < Question.TestAnswers.Count())
        {
            var answer = Question.TestAnswers.First(a => a.OrderNo == selectedAnswer);
            var nextAnswer = Question.TestAnswers.First(a => a.OrderNo == selectedAnswer + 1);
            (answer.OrderNo, nextAnswer.OrderNo) = (nextAnswer.OrderNo, answer.OrderNo);
            selectedAnswer++;
        }
    }

    private void Delete()
    {
        Question.TestAnswers = Question.TestAnswers.Where(a => a.OrderNo != selectedAnswer).Select(a =>
        {
            if(a.OrderNo > selectedAnswer) a.OrderNo--;
            return a;
        }).ToList();
    }
}
