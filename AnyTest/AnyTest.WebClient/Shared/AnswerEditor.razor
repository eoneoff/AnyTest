@inherits ValidatableFormViewModel<TestAnswer>

    <ValidatableForm @ref="form" Model="Answer" HideButtons="true">
        <div class="d-flex flex-row flex-nowrap">
            <ValidatableFormField Wide="@Wide" Class="flex-grow-1 mr-2">
                <ValidationMessage For="@(()=>Answer.Answer)" />
                <InputTextArea Class="form-control" @bind-Value="Answer.Answer" @oninput="@(()=>unchanged = false)" />
            </ValidatableFormField>
            @if (Multiple)
            {
                <ValidatableFormField Wide="@Wide">
                    <ValidationMessage For="@(()=>Answer.Answer)" />
                    <div class="d-flex flex-row flex-nowrap align-content-center">
                        <InputNumber Class="form-control form-control-sm text-right" Min="0" Max="@maxPercent" Style="width:3.5rem;" @bind-Value="Percent" />
                        <span class="font-weight-bold align-text-bottom">%</span>
                    </div>
                </ValidatableFormField>
            }
            else
            {
                <div class="custom-control custom-checkbox">
                    <input type="checkbox" @bind="isCorrect" class="custom-control-input" id="@($"is-correct-answer{Answer.OrderNo}")">
                    <label class="custom-control-label" for="@($"is-correct-answer{Answer.OrderNo}")"></label>
                </div>
            }
        </div>
    </ValidatableForm>

@code
{
    private int maxPercent = 100;

    private bool isCorrect
    {
        get => Answer.Percent == 100;
        set
        {
            if (value)
            {
                Answer.Percent = 100;
                SetAsCorrect.InvokeAsync(Answer.OrderNo);
            }
            else Answer.Percent = 0;
        }
    }

    private int Percent
    {
        get => Answer.Percent;
        set
        {
            PercentChanged.InvokeAsync(null);
            unchanged=false;
            var total = Answers.Where(a => a.OrderNo != Answer.OrderNo).Sum(a => a.Percent);
            if(value + total <= 100)
            {
                Answer.Percent = value;
                maxPercent = 100 - total;
            }
            else
            {
                maxPercent = 100-total;
                Answer.Percent = 100-total;
            }
        }
    }

    [Parameter]
    public TestAnswer Answer { get; set; } = new TestAnswer();

    [Parameter]
    public bool Multiple { get; set; }

    [Parameter]
    public EventCallback<int>SetAsCorrect { get; set; }

    [Parameter]
    public EventCallback PercentChanged { get; set; }

    [CascadingParameter(Name="Answers")]
    private IEnumerable<TestAnswer> Answers { get; set; }
}
