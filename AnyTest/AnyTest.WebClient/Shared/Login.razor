@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@inject HttpClient _httpClient

@if (regitsterStudent)
{
    <h1 class="text-white">@Localizer[nameof(Resources.StudentRegistration)]</h1>
    <div class="main-panel" style="width:90vw;">
        <div class="row mx-0">
            <div class="col-lg-6">
                <UserEditor @ref="userEditor" Model="registerModel" HideButtons="true" ShowRoles="false" />
            </div>
            <div class="col-lg-6">
                <div>
                    <PersonEditor @ref="personEditor" HideButtons="true" Person="newPerson" />
                </div>
            </div>
        </div>
        <div class="d-flex flex-row justify-content-end flex-nowrap my-2 mr-3">
            <button class="btn btn-success" @onclick="CreateNewStudent">@Localizer[nameof(Resources.Save)]</button>
            <button class="btn btn-danger ml-2" @onclick="() => regitsterStudent = false">@Localizer[nameof(Resources.Cancel)]</button>
        </div>
    </div>
}
else
{
    <div class="login-form">
        <h1 class="text-white">@Localizer[nameof(Resources.LoginAction)]</h1>

        @if (ShowErrors)
        {
            <div class="alert alert-danger" role="alert">
                @Error
            </div>
        }

        <div class="card">
            <div class="card-body">
                <h5 class="card-title">@Localizer[Resources.EnterCredentials]</h5>
                <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="form-group">
                        <label for="login">@Localizer[nameof(Resources.UserName)]</label>
                        <InputText Id="login" Class="form-control" @bind-Value="loginModel.UserName" disabled="@IsAuthenticating" />
                        <ValidationMessage For="@(() => loginModel.UserName)" />
                    </div>
                    <div class="form-group">
                        <label for="password">@Localizer[nameof(Resources.Password)]</label>
                        <InputText Id="password" type="password" Class="form-control" @bind-Value="loginModel.Password" disabled="@IsAuthenticating" />
                        <ValidationMessage For="@(() => loginModel.Password)" />
                    </div>
                    <div class="d-flex flex-row justify-content-lg-between ">
                        <button type="submit" class="btn btn-success" disabled="@IsAuthenticating">@Localizer[nameof(Resources.DoLogin)]</button>
                        <button class="btn btn-link" @onclick="()=>regitsterStudent = true">@Localizer[nameof(Resources.StudentRegistration)]</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}

@if (IsAuthenticating)
{
    <div class="modal-backdrop">
        <div class="d-flex justify-content-center flex-column align-items-center h-100">
            <div class="spinner-border text-white" style="width:20vh; height:20vh;border-width:30px;"></div>
            <h3 class="text-white font-weight-bold">@Localizer[nameof(Resources.LoginAction)]...</h3>
        </div>
    </div>
}


@code
{
    private LoginModel loginModel = new LoginModel();
    private bool ShowErrors;
    private string Error;
    private bool IsAuthenticating = false;
    private bool regitsterStudent = false;

    private UserEditor userEditor;
    private RegisterModel registerModel = new RegisterModel { Roles = new List<string> { "Student" } };
    private PersonEditor personEditor;
    private Person newPerson = new Person();

    private async Task HandleLogin()
    {
        ShowErrors = false;
        IsAuthenticating = true;

        var result = await AuthService.Login(loginModel);

        IsAuthenticating = false;

        if (!result.Sussessfull)
        {
            Error = result.Error;
            ShowErrors = true;
        }
        else
        {
            await State.GetPersonByAuthorizedUser();
            StateHasChanged();
        }
    }

    private async void CreateNewStudent()
    {
        newPerson.Email = registerModel.Email;
        bool userValid = userEditor.Validate();
        if(personEditor.Validate() && userValid)
        {
            IsAuthenticating = true;
            var newUser = new UserInfo
            {
                User = registerModel.UserName,
                Email = registerModel.Email,
                Roles = new List<string> { "Student"}
            };

            var registerResult = await _httpClient.PostJsonAsync<RegisterResult>("accounts", registerModel);
            if (registerResult.Successful)
            {
                newPerson.Email = registerModel.Email;
                registerModel = new RegisterModel();
                await State.SavePerson(newPerson, newPerson.Id == 0 ? newUser.Roles : null);
                newPerson = new Person();
                regitsterStudent = false;
            }
            IsAuthenticating = false;
        }
    }
}