@if (isOpen)
{
    <div class="modal-backdrop" style="z-index:@BackdropZIndex;"></div>
    <div class="d-flex modal-window flex-column @Class" style="z-index:@DialogZIndex; @Style">
        <div class="modal-header">
            @Header
            <button class="close ml-auto" @onclick="@(()=>isOpen = false)">
                <i class="fa fa-times"></i>
            </button>
        </div>
        <div class="show-panel modal-window-show-panel flex-column flex-grow-1">
            <div class="px-1 py-2">
                @Content
            </div>
            <div class="d-flex flex-row justify-content-end flex-nowrap mt-2">
                @if (ShowOkButton) { <button class="btn btn-success" @onclick="OkClicked">@OkButtonText</button> }
                <button class="btn btn-danger ml-2" @onclick="@(()=>isOpen = false)">@(CancelButtonText ?? Localizer[nameof(Resources.Cancel)])</button>
            </div>
        </div>
    </div>
}

@code
{
    private bool isOpen = false;

    [Parameter]
    public RenderFragment Header { get; set; }

    [Parameter]
    public RenderFragment Content { get; set; }

    [Parameter]
    public string OkButtonText { get; set; } = "OK";

    [Parameter]
    public string CancelButtonText { get; set; }

    [Parameter]
    public EventCallback OnConfirm { get; set; }

    [Parameter]
    public int Level { get; set; } = 1;

    [Parameter]
    public string Class { get; set; }

    [Parameter]
    public string Style { get; set; }

    [Parameter]
    public bool CloseOnOk { get; set; } = true;

    [Parameter]
    public bool ShowOkButton { get; set; } = true;

    private int DialogZIndex => Level * 1000;
    private int BackdropZIndex => Level * 1000 - 500;

    public void Show()
    {
        isOpen = true;
        StateHasChanged();
    }

    public void Hide()
    {
        isOpen = false;
        StateHasChanged();
    }

    private void OkClicked()
    {
        if(CloseOnOk) isOpen = false;
        OnConfirm.InvokeAsync(null);
    }
}
