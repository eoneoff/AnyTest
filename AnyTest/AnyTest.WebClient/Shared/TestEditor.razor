@inherits ValidatableFormViewModel<Test>

<ValidatableForm @ref="form" Model="Test" OnSubmit="OnSubmit" OnCancel="OnCancel" Unchanged="@unchanged" Disabled="@Disabled" HideButtons="true">
    <div class="container-fluid">
        <ValidatableFormField Wide="@Wide" Label="@Localizer[nameof(Resources.Name)]" Id="coursename">
            <ValidationMessage For="@(()=>Test.Name)" />
            <InputText Id="coursename" Class="form-control" @bind-Value="Test.Name" @oninput="@(()=>unchanged = false)" disabled="@Disabled" />
        </ValidatableFormField>
    </div>
</ValidatableForm>
<div class="row mt-2">
    <div class="col-lg-6">
        @if(noQuestions) { <span class="text-danger">@Localizer[nameof(Resources.AddQuestion)]</span> }
        <div class="d-flex flex-row">
            <div class="border @(noQuestions ? "border-danger" : "border-success") flex-grow-1 p-1">
                <table class="table table-sm table-borderless table-hover">
                    @foreach (var q in (Test.TestQuestions ?? new List<TestQuestion>()).OrderBy(q => q.OrderNo))
                    {
                        <tr @onclick="()=>selectedQuestion = q" class="@(selectedQuestion.OrderNo == q.OrderNo ? "selected-table-row" : "")">
                            <td>@q.OrderNo</td><td>@q.Question.</td>
                        </tr>
                    }
                </table>
            </div>
            <div class="d-flex flex-column pl-1">
                <button type="button" class="btn btn-success" @onclick="AddQuestion"><i class="fa fa-plus"></i></button>
                <button type="button" class="btn btn-danger mt-1" @onclick="Delete"><i class="fa fa-trash"></i></button>
                <button type="button" class="btn btn-success mt-1" @onclick="MoveUp"><i class="fa fa-arrow-up"></i></button>
                <button type="button" class="btn btn-success mt-1" @onclick="MoveDown"><i class="fa fa-arrow-down"></i></button>
            </div>
        </div>
    </div>
    <div class="col-lg-6">
        @if(selectedQuestion.OrderNo > 0) { <QuestionEditor @ref="questionEditor" Question = "selectedQuestion"/> }
    </div>
</div>
@if (!HideButtons)
{
    <div class="d-flex flex-row justify-content-between mt-3">
        <button type="button" class="btn btn-success" @onclick="Save" disabled="@unchanged">@Localizer[nameof(Resources.Save)]</button>
        <button type="button" class="btn btn-danger" @onclick="OnCancel">@Localizer[nameof(Resources.Cancel)]</button>
    </div>
}


@code
{
    private TestQuestion selectedQuestion = new TestQuestion { OrderNo = 1 };
    private QuestionEditor questionEditor;
    private bool noQuestions = false;

    [Parameter]
    public Test Test { get; set; } = new Test();

    private void AddQuestion()
    {
        if(selectedQuestion.OrderNo == 0 || questionEditor.Validate())
        {
            unchanged = false;
            noQuestions = false;
            Test.TestQuestions??=new List<TestQuestion>();
            Test.TestQuestions.Add(selectedQuestion);
            selectedQuestion = new TestQuestion { OrderNo = Test.TestQuestions.Count() + 1};
        }
    }

    private void MoveUp()
    {
        if(selectedQuestion.OrderNo > 1)
        {
            unchanged = false;
            var prevQuestion = Test.TestQuestions.First(q => q.OrderNo == selectedQuestion.OrderNo - 1);
            (selectedQuestion.OrderNo, prevQuestion.OrderNo) = (prevQuestion.OrderNo, selectedQuestion.OrderNo);
        }
    }

    private void MoveDown()
    {
        if(Test.TestQuestions != null && selectedQuestion.OrderNo < Test.TestQuestions.Count())
        {
            unchanged = false;
            var nextQuestion = Test.TestQuestions.First(q => q.OrderNo == selectedQuestion.OrderNo + 1);
            (selectedQuestion.OrderNo, nextQuestion.OrderNo) = (nextQuestion.OrderNo, selectedQuestion.OrderNo);
        }
    }

    private void Delete()
    {
        if(Test.TestQuestions != null && selectedQuestion.OrderNo <= Test.TestQuestions.Count())
        {
            Test.TestQuestions = Test.TestQuestions.Where(q => q.OrderNo != selectedQuestion.OrderNo)
            .Select(q =>
            {
                if(q.OrderNo > selectedQuestion.OrderNo) q.OrderNo--;
                return q;
            }).ToList();
            selectedQuestion = new TestQuestion { OrderNo = Test.TestQuestions.Count() + 1 };
        }
    }

    private void Save()
    {
        if(Test.TestQuestions == null || Test.TestQuestions.Count() == 0)
        {
            noQuestions = true;
            StateHasChanged();
        }
        if(form.Validate() && !noQuestions)
        {
            
        }
    }
}