@inherits ValidatableFormViewModel<Test>
@inject HttpClient _httpClient

<ValidatableForm @ref="form" Model="Test" OnSubmit="OnSubmit" OnCancel="OnCancel" Unchanged="@unchanged" Disabled="@Disabled" HideButtons="true">
    <div class="container-fluid px-0">
        <ValidatableFormField Wide="@Wide" Label="@Localizer[nameof(Resources.Name)]" Id="coursename">
            <ValidationMessage For="@(()=>Test.Name)" />
            <InputText Id="coursename" Class="form-control" @bind-Value="Test.Name" @oninput="@(()=>unchanged = false)" disabled="@Disabled" />
        </ValidatableFormField>
    </div>
</ValidatableForm>
<h6>@Localizer[nameof(Resources.Subjects)]</h6>
<div class="d-flex flex-column flex-lg-row">
    <select class="custom-select mr-lg-2" @bind="selectedSubject">
        <option value=""></option>
        @foreach (var subject in State.Subjects)
        {
            <option value="@subject.Id">@subject.Name</option>
        }
    </select>
    <button type="button" class="btn btn-success mt-2 mt-lg-0" @onclick="AddSubject">@Localizer[nameof(Resources.Add)]</button>
</div>
<div class="border border-success p-2 my-2">
    <table class="table table-sm table-hover table-borderless">
        @foreach (var subject in (Test.Subjects ?? new List<TestSubject>()).Where(s => !s.Deleted))
        {
            <tr>
                <td>@State.Subjects.First(s => s.Id == subject.SubjectId).Name</td>
                <td class="text-right"><button type="button" class="btn btn-outline-danger" @onclick="()=>RemoveSubject(subject.SubjectId)"><i class="fa fa-trash"></i></button></td>
            </tr>
        }
    </table>
</div>
<h6>@Localizer[nameof(Resources.Courses)]</h6>
<div class="d-flex flex-column flex-lg-row">
    <select class="custom-select mr-lg-2" @bind="selectedCourse">
        <option value=""></option>
        @foreach (var course in State.Courses)
        {
            <option value="@course.Id">@course.Name</option>
        }
    </select>
    <button type="button" class="btn btn-success mt-2 mt-lg-0" @onclick="AddCourse">@Localizer[nameof(Resources.Add)]</button>
</div>
<div class="border border-success p-2 mt-2">
    <table class="table table-sm table-hover table-borderless">
        @foreach (var course in (Test.Courses ?? new List<TestCourse>()).Where(c => !c.Deleted))
        {
            <tr>
                <td>@State.Courses.First(c => c.Id == course.CourseId).Name</td>
                <td class="text-right"><button type="button" class="btn btn-outline-danger" @onclick="()=>RemoveCourse(course.CourseId)"><i class="fa fa-trash"></i></button></td>
            </tr>
        }
    </table>
</div>
<div class="row mt-2">
    <div class="col-lg-6">
        @if (noQuestions)
        {<span class="text-danger">@Localizer[nameof(Resources.AddQuestion)]</span>}
        <div class="d-flex flex-row">
            <div class="border @(noQuestions ? "border-danger" : "border-success") flex-grow-1 p-1">
                <table class="table table-sm table-borderless table-hover">
                    @foreach (var q in (Test.TestQuestions ?? new List<TestQuestion>()).OrderBy(q => q.OrderNo))
                    {
                        <tr @onclick="()=>selectedQuestion = q" class="@(selectedQuestion.OrderNo == q.OrderNo ? "selected-table-row" : "")">
                            <td>@q.OrderNo</td>
                            <td>@q.Question.</td>
                        </tr>
                    }
                </table>
            </div>
            <div class="d-flex flex-column pl-1">
                <button type="button" class="btn btn-success" @onclick="AddQuestion"><i class="fa fa-plus"></i></button>
                <button type="button" class="btn btn-danger mt-1" @onclick="Delete"><i class="fa fa-trash"></i></button>
                <button type="button" class="btn btn-success mt-1" @onclick="MoveUp"><i class="fa fa-arrow-up"></i></button>
                <button type="button" class="btn btn-success mt-1" @onclick="MoveDown"><i class="fa fa-arrow-down"></i></button>
            </div>
        </div>
    </div>
    <div class="col-lg-6">
        @if (selectedQuestion.OrderNo > 0)
        {<QuestionEditor @ref="questionEditor" Question="selectedQuestion" />}
    </div>
</div>
@if (!HideButtons)
{
    <div class="d-flex flex-row justify-content-between mt-3">
        <button type="button" class="btn btn-success" @onclick="SaveClicked" disabled="@unchanged">@Localizer[nameof(Resources.Save)]</button>
        <button type="button" class="btn btn-danger" @onclick="OnCancel">@Localizer[nameof(Resources.Cancel)]</button>
    </div>
}

<ModalDialog @ref="saveConfirmationDialog" OnConfirm="Save">
    <Header>@Localizer[nameof(Resources.SaveTest)]?</Header>
    <Content>
        <table class="table table-sm table-borderless">
            <tr><th class="text-right">@Localizer[nameof(Resources.Name)]</th><td>@Test.Name</td></tr>
        </table>
    </Content>
</ModalDialog>

<ModalDialog @ref="membershipConfirmation" OnConfirm="membershipConfirmationSubmit">
    <Header>@membershipConfirmaitonHeader</Header>
    <Content>
        @membershipConfirmationText
    </Content>
</ModalDialog>

@if(saving)
{
    <div class="modal-backdrop">
        <div class="d-flex justify-content-center flex-column align-items-center h-100">
            <div class="spinner-border text-white" style="width:20vh; height:20vh;border-width:30px;"></div>
            <h3 class="text-white font-weight-bold">@(Localizer[nameof(Resources.PleaseWait)])...</h3>
        </div>
    </div>
}


@code
{
    private TestQuestion selectedQuestion = new TestQuestion { OrderNo = 1 };
    private QuestionEditor questionEditor;
    private bool noQuestions = false;
    private long? selectedSubject;
    private long? selectedCourse;
    private ModalDialog saveConfirmationDialog;
    private bool saving = false;

    private ModalDialog membershipConfirmation;
    private string membershipConfirmaitonHeader;
    private string membershipConfirmationText;
    private Func<Task> membershipConfirmationSubmit;

    [Parameter]
    public Test Test { get; set; } = new Test { Subjects = new List<TestSubject>(), Courses = new List<TestCourse>() };

    private void AddQuestion()
    {
        if (selectedQuestion.OrderNo == 0 || questionEditor.Validate())
        {
            unchanged = false;
            noQuestions = false;
            Test.TestQuestions ??= new List<TestQuestion>();
            Test.TestQuestions.Add(selectedQuestion);
            selectedQuestion = new TestQuestion { OrderNo = Test.TestQuestions.Count() + 1 };
        }
    }

    private void MoveUp()
    {
        if (selectedQuestion.OrderNo > 1)
        {
            unchanged = false;
            var prevQuestion = Test.TestQuestions.First(q => q.OrderNo == selectedQuestion.OrderNo - 1);
            (selectedQuestion.OrderNo, prevQuestion.OrderNo) = (prevQuestion.OrderNo, selectedQuestion.OrderNo);
        }
    }

    private void MoveDown()
    {
        if (Test.TestQuestions != null && selectedQuestion.OrderNo < Test.TestQuestions.Count())
        {
            unchanged = false;
            var nextQuestion = Test.TestQuestions.First(q => q.OrderNo == selectedQuestion.OrderNo + 1);
            (selectedQuestion.OrderNo, nextQuestion.OrderNo) = (nextQuestion.OrderNo, selectedQuestion.OrderNo);
        }
    }

    private void Delete()
    {
        if (Test.TestQuestions != null && selectedQuestion.OrderNo <= Test.TestQuestions.Count())
        {
            Test.TestQuestions = Test.TestQuestions.Where(q => q.OrderNo != selectedQuestion.OrderNo)
            .Select(q =>
            {
                if (q.OrderNo > selectedQuestion.OrderNo) q.OrderNo--;
                return q;
            }).ToList();
            selectedQuestion = new TestQuestion { OrderNo = Test.TestQuestions.Count() + 1 };
        }
    }

    private void SaveClicked()
    {
        if (Test.TestQuestions == null || Test.TestQuestions.Count() == 0)
        {
            noQuestions = true;
            StateHasChanged();
        }
        if (form.Validate() && !noQuestions)
        {
            saveConfirmationDialog.Show();
        }
    }

    private async void Save()
    {
        await OnSubmit.InvokeAsync(null);
    }

    private void AddSubject()
    {
        Test.Subjects ??= new List<TestSubject>();
        if (selectedSubject is long subjectId && !Test.Subjects.Any(s => s.SubjectId == subjectId && !s.Deleted))
        {
            membershipConfirmaitonHeader = $"{Localizer[nameof(Resources.AddSubject)]}?";
            membershipConfirmationText = $"{string.Format(Localizer[nameof(Resources.AddSubjectToTest)].Value, State.Subjects.First(s => s.Id == subjectId).Name)}?";
            membershipConfirmationSubmit = async () =>
            {
                if (Test.Id == 0) Test.Subjects.Add(new TestSubject { TestId = Test.Id, SubjectId = subjectId });
                else
                {
                    saving = true;
                    Test.Subjects.Add(await _httpClient.PostJsonAsync<TestSubject>($"tests/{Test.Id}/subjects/{subjectId}", null));
                    await State.GetTestsList();
                    saving = false;
                }
            };
            membershipConfirmation.Show();
        }
    }

    private void RemoveSubject(long subjectId)
    {
        if (Test.Subjects.Any(s => s.SubjectId == subjectId))
        {
            membershipConfirmaitonHeader = $"{Localizer[nameof(Resources.RemoveSubject)]}?";
            membershipConfirmationText = $"{string.Format(Localizer[nameof(Resources.RemoveSubjectFromTest)].Value, State.Subjects.First(s => s.Id == subjectId).Name)}?";
            membershipConfirmationSubmit = async () =>
            {
                if (Test.Id != 0)
                {
                    saving = true;
                    await _httpClient.PostJsonAsync($"tests/{Test.Id}/subjects/{subjectId}", null);
                    await State.GetTestsList();
                    saving = false;
                }
                Test.Subjects = Test.Subjects.Where(s => s.SubjectId != subjectId).ToList();
            };
        }
    }

    private void AddCourse()
    {
        Test.Courses ??= new List<TestCourse>();
        if (selectedCourse is long courseId && !Test.Courses.Any(s => s.CourseId == courseId && !s.Deleted))
        {
            membershipConfirmaitonHeader = $"{Localizer[nameof(Resources.AddCourse)]}?";
            membershipConfirmationText = $"{string.Format(Localizer[nameof(Resources.AddCourseToTest)].Value, State.Subjects.First(s => s.Id == courseId).Name)}?";
            membershipConfirmationSubmit = async () =>
            {
                if (Test.Id == 0) Test.Courses.Add(new TestCourse { TestId = Test.Id, CourseId = courseId });
                else
                {
                    saving = true;
                    Test.Subjects.Add(await _httpClient.PostJsonAsync<TestSubject>($"tests/{Test.Id}/courses/{courseId}", null));
                    await State.GetTestsList();
                    saving = false;
                }
            };
            membershipConfirmation.Show();
        }
    }

    private void RemoveCourse(long courseId)
    {
        if (Test.Courses.Any(s => s.CourseId == courseId))
        {
            membershipConfirmaitonHeader = $"{Localizer[nameof(Resources.RemoveCourse)]}?";
            membershipConfirmationText = $"{string.Format(Localizer[nameof(Resources.RemoveTestFromCourse)].Value, State.Courses.First(s => s.Id == courseId).Name)}?";
            membershipConfirmationSubmit = async () =>
            {
                if (Test.Id != 0)
                {
                    saving = true;
                    await _httpClient.PostJsonAsync($"tests/{Test.Id}/courses/{courseId}", null);
                    await State.GetTestsList();
                    saving = false;
                }
                Test.Courses = Test.Courses.Where(s => s.CourseId != courseId).ToList();
            };
        }
    }
}