@page "/tutor/students/{StudentId:long}"
@inject HttpClient _httpClient
@using Microsoft.AspNetCore.Authorization
@attribute  [Authorize(Roles = "Tutor")]

<div class="p-5">
    <div class="card m-5 flex-grow-1">
        <h3 class="card-header">
            @Localizer[nameof(Resources.StudentInfo)]
        </h3>
        <div class="card-body">
            <PersonViewer Person="student?.Person" />
        </div>
    </div>
    <h5>@Localizer[nameof(Resources.Courses)]</h5>
    <div class="d-flex flex-column flex-lg-row">
        <select class="custom-select mr-lg-1" @bind="selectedCourseId">
            <option value="0"></option>
            @foreach (var course in AvailableCourses)
            {
                <option @key="course.Id" value="@course.Id">@course.Name</option>
            }
        </select>
        <button type="button" class="btn btn-success mt-1 mt-lg-0 text-nowrap" @onclick="AddCourseClicked">@Localizer[nameof(Resources.AddToCourse)]</button>
    </div>
    <div class="mt-2 p=2 border border-success">
        <table class="table table-sm table-borderless mb-0">
            @foreach (var course in (student?.Courses?.Where(c => !c.Removed) ?? new List<StudentCourse>()))
            {
                <tr>
                    <td class="align-middle">@(State?.Courses?.FirstOrDefault(c => c.Id == course.CourseId)?.Name)</td>
                    <td class="text-right"><button type="button" class="btn btn-outline-danger" @onclick="()=>RemoveCourseClicked(course.CourseId)"><i class="fa fa-trash"></i></button></td>
                </tr>
            }
        </table>
    </div>
    @foreach(var test in Tests)
    {
        <div class="card mt-2">
            <div class="card-body">
                <TestStudentViewer Student="student" Test="test" ShowDetails="false"></TestStudentViewer>
            </div>
        </div>
    }
</div>

<ModalDialog @ref="confirmationDialog" OnConfirm="OnConfirm">
    <Header>@confirmationDialogHeader?</Header>
    <Content>
        @confirmationDialogContent
    </Content>
</ModalDialog>

@if (loading)
{
    <div class="modal-backdrop">
        <div class="d-flex justify-content-center flex-column align-items-center h-100">
            <div class="spinner-border text-white" style="width:20vh; height:20vh;border-width:30px;"></div>
            <h3 class="text-white font-weight-bold">@(Localizer[nameof(Resources.PleaseWait)])...</h3>
        </div>
    </div>
}

@code
{
    [Parameter]
    public long StudentId { get; set; } = 0;

    private long selectedCourseId = 0;
    private Student student = new Student();
    private IEnumerable<Test> Tests = new List<Test>();
    private IEnumerable<Course> AvailableCourses => State?.Courses?.Where(c => !(student?.Courses?.Where(sc => !sc.Removed)?.Any(sc => sc.CourseId == c.Id) ?? false)) ?? new List<Course>();
    private bool loading;

    private ModalDialog confirmationDialog;
    private string confirmationDialogHeader;
    private string confirmationDialogContent;
    private Action OnConfirm;

    protected override async Task OnInitializedAsync()
    {
        loading = true;
        if (!(State?.Students?.Any() ?? false) && StudentId != 0)
        {
            student = new Student { Person = State.LoadingStub };
            student = await _httpClient.GetJsonAsync<Student>($"students/{StudentId}");
        }
        else
            student = State?.Students?.FirstOrDefault(s => s.Id == StudentId) ?? new Student();
        Tests = await _httpClient.GetJsonAsync<IEnumerable<Test>>($"students/{StudentId}/tests");
        loading = false;
    }

    private void AddCourseClicked()
    {
        if (selectedCourseId != 0)
        {
            confirmationDialogHeader = Localizer[nameof(Resources.AddToCourse)];
            confirmationDialogContent = string.Format(Localizer[nameof(Resources.AddStudentToCourseParam)].Value,
                                                    $"{student?.Person?.FamilyName} {student?.Person?.FirstName} {student?.Person?.Patronimic}".Trim(),
                                                    State?.Courses?.FirstOrDefault(c => c.Id == selectedCourseId).Name);
            OnConfirm = async () =>
            {
                student.Courses ??= new List<StudentCourse>();
                student.Courses.Add(new StudentCourse { StudentId = student.Id, CourseId = selectedCourseId });
                await _httpClient.PostAsync($"students/{student.Id}/courses/{selectedCourseId}", null);
                selectedCourseId = 0;
            };
            confirmationDialog.Show();
        }
    }

    private void RemoveCourseClicked(long courseId)
    {
        confirmationDialogHeader = Localizer[nameof(Resources.RemoveFromCourse)];
        confirmationDialogContent = string.Format(Localizer[nameof(Resources.RemoveStudentFromCourseParam)].Value,
            $"{student?.Person?.FamilyName} {student?.Person?.FirstName} {student?.Person?.Patronimic}".Trim(),
            State?.Courses?.FirstOrDefault(c => c.Id == courseId).Name);
        OnConfirm = async () =>
        {
            var response = await _httpClient.DeleteAsync($"students/{student.Id}/courses/{courseId}");
            student.Courses = student.Courses.Where(c => c.CourseId != courseId).ToList();
        };
        confirmationDialog.Show();
    }
}
