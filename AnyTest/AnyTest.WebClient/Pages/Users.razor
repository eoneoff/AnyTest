@page "/users"
@inject HttpClient httpClient
@using Microsoft.AspNetCore.Authorization
@inject NavigationManager NavigationManager

<div class="m-5">
    <div class="d-flex flex-row mb-2">
        <button type="button" class="btn btn-success" @onclick="@(()=>editor.Show())">@Localizer[nameof(Resources.AddUser)]</button>
    </div>
    <PageView Items="State.Users" PageSize="12" ContainerClass="table-bordered table-sm table-hover">
        <Header>
            <tr>
                <th>@Localizer[nameof(Resources.Login)]</th>
                <th>e-mail</th>
                <th>@Localizer[nameof(Resources.UserName)]</th>
                <th>@Localizer[nameof(Resources.Roles)]</th>
            </tr>
        </Header>
        <ItemTemplate Context="user">
            <tr @onclick="()=>selectedUser = user" class="@(user.User == selectedUser?.User ? "selected-table-row" : "")">
                <td>@user.User</td>
                <td>@user.Email</td>
                <td>@user.Name</td>
                <td>
                    <ul>
                        @foreach(var role in user.Roles)
                        {
                            <li>@Localizer[role]</li>
                        }
                    </ul>
                </td>
            </tr>
        </ItemTemplate>
    </PageView>
</div>

<ModalDialog @ref="editor" Style="width:80vw;" OkButtonText="@Localizer[nameof(Resources.Save)]" OnConfirm="SaveUserClicked" CloseOnOk="false">
    <Header></Header>
    <Content>
        <div class="row mx-0">
            <div class="col-lg-6">
                <UserEditor @ref="userEditor" Model="registerModel" HideButtons="true"></UserEditor>
            </div>
            <div class="col-lg-6">
                <div>
                    <PersonEditor @ref="personEditor" HideButtons="true" Disabled="@(!enableEditPerson)" Person="newPerson"></PersonEditor>
                </div>
                <div class="mt-2 custom-control custom-switch">
                    <input type="checkbox" class="custom-control-input" id="personEditSwitch" @bind-value="@enableEditPerson"/>
                    <label class="custom-control-label" for="personEditSwitch">@Localizer[nameof(Resources.EditPerson)]</label>
                </div>
            </div>
        </div>
    </Content>
</ModalDialog>
<ModalDialog @ref="saveConfirmation" Level="2" OnConfirm="SaveUser">
    <Header>@Localizer[nameof(Resources.CreateUser)]?</Header>
    <Content>
        <div>
            <table class="table table-sm table-borderless">
                <tr><th class="text-right">@Localizer[nameof(Resources.UserName)]:</th><td>@registerModel.UserName</td></tr>
                <tr><th class="text-right">e-mail:</th><td>@registerModel.Email</td></tr>
            </table>
            <h6>@Localizer[nameof(Resources.Roles)]</h6>
            <ul>
                @foreach(var role in registerModel.Roles)
                {
                    <li>@Localizer[role]</li>
                }
            </ul>
        </div>
    </Content>
</ModalDialog>

@code
{  
    [CascadingParameter]
    private Task<AuthenticationState> authStateTask {get; set;}
    private UserInfo selectedUser;

    private ModalDialog editor;
    private ModalDialog saveConfirmation;

    private bool enableEditPerson = false;

    private UserEditor userEditor;
    private PersonEditor personEditor;

    private RegisterModel registerModel = new RegisterModel();
    private Person newPerson = new Person();

    protected override async Task OnInitializedAsync()
    {
        if(!(await authStateTask).User.IsInRole("Administrator"))
        {
            NavigationManager.NavigateTo("/");
            return;
        }


        if (State.Users.Count() == 0)
        {
            await State.GetUsers();
        }
    }

    private void SaveUserClicked()
    {
        bool isPersonValid = !enableEditPerson || personEditor.Validate();
        if (userEditor.Validate() && isPersonValid)
        {
            saveConfirmation.Show();
        }
    }

    private async Task SaveUser()
    {
        editor.Hide();
        var newUser = new UserInfo
        {
            User = registerModel.UserName,
            Email = registerModel.Email,
            Roles = registerModel.Roles
        };

        var registerResult = await httpClient.PostJsonAsync<RegisterResult>("accounts", registerModel);
        if(registerResult.Successful)
        {
            newPerson.Email = registerModel.Email;
            registerModel = new RegisterModel();
            State.Users.Add(newUser);
            if(enableEditPerson)
            {
                await State.SavePerson(newPerson, newPerson.Id == 0 ? newUser.Roles : null);
                newPerson = new Person();
            }
        }
    }
}